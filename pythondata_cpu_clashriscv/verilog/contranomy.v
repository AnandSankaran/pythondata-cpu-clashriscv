/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.2.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module contranomy
    ( // Inputs
      input  clk // clock
    , input  reset // reset
    , input [31:0] iBusWishbone_DAT_MISO
    , input  iBusWishbone_ACK
    , input  iBusWishbone_ERR
    , input [31:0] dBusWishbone_DAT_MISO
    , input  dBusWishbone_ACK
    , input  dBusWishbone_ERR

      // Outputs
    , output wire [29:0] iBusWishbone_ADR
    , output wire [31:0] iBusWishbone_DAT_MOSI
    , output wire [3:0] iBusWishbone_SEL
    , output wire  iBusWishbone_CYC
    , output wire  iBusWishbone_STB
    , output wire  iBusWishbone_WE
    , output wire [2:0] iBusWishbone_CTI
    , output wire [1:0] iBusWishbone_BTE
    , output wire [31:0] dbusWishbone_ADR
    , output wire [31:0] dbusWishbone_DAT_MOSI
    , output wire [3:0] dbusWishbone_SEL
    , output wire  dbusWishbone_CYC
    , output wire  dbusWishbone_STB
    , output wire  dbusWishbone_WE
    , output wire [2:0] dbusWishbone_CTI
    , output wire [1:0] dbusWishbone_BTE
    );
  reg [0:0] stage = 1'd0;
  reg [31:0] pc = 32'd0;
  reg [29:0] instruction = {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};
  reg [991:0] registers = {{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}}};
  reg [31:0] rvfiInstr = 32'b00000000000000000000000000000000;
  reg [63:0] rvfiOrder = 64'b0000000000000000000000000000000000000000000000000000000000000000;
  wire [532:0] result;
  wire [1683:0] c$case_alt;
  wire [31:0] c$case_alt_0;
  wire [31:0] c$case_alt_1;
  wire [31:0] c$case_alt_2;
  wire [31:0] c$case_alt_3;
  wire [3:0] c$case_alt_4;
  wire [3:0] c$case_alt_5;
  wire [3:0] c$case_alt_6;
  wire [3:0] c$case_alt_7;
  reg [75:0] dBusM2S;
  reg [31:0] c$app_arg;
  reg [31:0] c$case_alt_8;
  wire [31:0] c$case_alt_9;
  wire [31:0] c$case_alt_10;
  reg [31:0] c$case_alt_11;
  reg [31:0] c$case_alt_12;
  reg [31:0] c$case_alt_13;
  reg [31:0] c$case_alt_14;
  reg [31:0] c$case_alt_15;
  wire [31:0] c$case_alt_16;
  reg [31:0] c$case_alt_17;
  reg [31:0] c$case_alt_18;
  reg [31:0] c$case_alt_19;
  reg [4:0] c$app_arg_0;
  wire [4:0] c$case_alt_20;
  wire [4:0] c$case_alt_21;
  wire [31:0] result_0;
  wire signed [63:0] wild3;
  wire signed [63:0] c$wild3_app_arg;
  reg [4:0] rs2AddrN;
  wire [31:0] result_1;
  wire signed [63:0] wild3_0;
  wire signed [63:0] c$wild3_app_arg_0;
  reg [4:0] rs1AddrN;
  reg  c$app_arg_1;
  reg [4:0] c$rs1AddrN_case_alt;
  wire [4:0] c$rs1AddrN_case_alt_0;
  wire [4:0] c$rs1AddrN_case_alt_1;
  wire [4:0] c$rs2AddrN_case_alt;
  wire [31:0] pcN1;
  wire  branchTrap;
  reg [63:0] c$app_arg_2;
  wire [63:0] c$case_alt_22;
  wire [63:0] c$case_alt_23;
  reg [991:0] result_2;
  wire [991:0] c$case_alt_24;
  wire [991:0] c$case_alt_25;
  reg [0:0] c$app_arg_3;
  wire [0:0] c$case_alt_26;
  wire [75:0] result_3;
  reg [3:0] c$dBusM2S_app_arg;
  wire [31:0] result_4;
  wire signed [63:0] wild5;
  wire signed [63:0] c$wild5_app_arg;
  reg [3:0] c$dBusM2S_app_arg_0;
  reg [3:0] c$dBusM2S_case_alt;
  wire [31:0] c$dBusM2S_app_arg_1;
  wire [31:0] result_5;
  wire signed [63:0] wild5_0;
  wire signed [63:0] c$wild5_app_arg_0;
  reg [31:0] result_6;
  wire [31:0] c$pcN0_case_alt;
  wire [31:0] c$pcN0_case_alt_0;
  wire [31:0] x;
  wire [31:0] c$pcN0_app_arg;
  reg [31:0] result_7;
  wire [31:0] c$pcN0_case_alt_1;
  wire [31:0] c$pcN0_case_alt_2;
  wire [31:0] c$pcN0_case_alt_3;
  wire [31:0] c$pcN0_case_alt_4;
  wire [31:0] c$pcN0_case_alt_5;
  wire [31:0] c$pcN0_case_alt_6;
  wire [31:0] \$j ;
  wire signed [31:0] c$pcN0_app_arg_0;
  wire signed [31:0] c$pcN0_app_arg_1;
  wire [31:0] result_8;
  wire signed [63:0] wild5_1;
  wire signed [63:0] c$wild5_app_arg_1;
  wire [31:0] result_9;
  wire signed [63:0] wild5_2;
  wire signed [63:0] c$wild5_app_arg_2;
  reg [29:0] result_10;
  wire [29:0] c$case_alt_27;
  wire [29:0] c$case_alt_28;
  wire [29:0] c$case_alt_29;
  wire [29:0] c$case_alt_30;
  wire [29:0] c$case_alt_31;
  wire [29:0] c$case_alt_32;
  wire [29:0] c$case_alt_33;
  wire [29:0] c$case_alt_34;
  wire [29:0] c$case_alt_35;
  wire [29:0] c$case_alt_36;
  wire [29:0] c$case_alt_37;
  wire  dt;
  wire  dt1;
  wire  dt2;
  wire  dt3;
  wire [3:0] result_11;
  wire  dt_0;
  wire  dt1_0;
  wire  dt2_0;
  wire  dt3_0;
  wire [3:0] result_12;
  wire [9:0] result_13;
  wire [8:0] a1;
  wire [19:0] dt_1;
  wire [4:0] dt1_1;
  wire [27:0] result_14;
  wire [26:0] a1_0;
  wire [19:0] dt_2;
  wire [4:0] dt1_2;
  wire [27:0] result_15;
  wire [26:0] a1_1;
  wire [2:0] opcode;
  wire [4:0] src;
  wire [4:0] dest;
  wire [27:0] result_16;
  reg  c$case_scrut;
  wire [27:0] c$case_alt_38;
  wire [4:0] dt1_3;
  wire [27:0] result_17;
  reg [27:0] result_18;
  reg [1:0] c$decodeRIInstr_$jOut_app_arg;
  wire [1:0] c$decodeRIInstr_$jOut_case_alt;
  reg [3:0] c$case_scrut_0;
  wire [2:0] x_0;
  wire [11:0] dt1_4;
  wire [26:0] a1_2;
  wire  ds;
  wire  ds1;
  reg [5:0] c$case_alt_39;
  wire [4:0] c$app_arg_4;
  wire [4:0] c$app_arg_5;
  wire [5:0] result_19;
  wire [5:0] result_20;
  wire [5:0] c$case_alt_40;
  reg [5:0] c$case_alt_41;
  wire [4:0] x_1;
  wire [4:0] dt1_5;
  wire [4:0] dt2_1;
  wire [4:0] dt3_1;
  wire [20:0] result_21;
  wire [19:0] a1_3;
  reg [2:0] c$case_scrut_1;
  wire [1:0] x_2;
  wire [11:0] dt1_6;
  wire [4:0] dt2_2;
  wire [4:0] dt3_2;
  wire [27:0] result_22;
  wire [26:0] a1_4;
  reg [4:0] c$case_scrut_2;
  wire [3:0] x_3;
  wire [11:0] dt1_7;
  wire [4:0] dt2_3;
  wire [4:0] dt3_3;
  wire [27:0] result_23;
  wire [26:0] a1_5;
  wire [11:0] dt_3;
  wire [4:0] dt1_8;
  wire [4:0] dt2_4;
  wire [26:0] result_24;
  wire [25:0] a1_6;
  wire [19:0] dt_4;
  wire [4:0] dt1_9;
  wire [26:0] result_25;
  wire [25:0] a1_7;
  wire [30:0] c$case_alt_42;
  wire [30:0] c$case_alt_43;
  wire [25:0] result_26;
  wire [25:0] result_27;
  wire [4:0] dt1_10;
  wire [11:0] v1;
  wire [1:0] x_4;
  reg [2:0] c$case_scrut_3;
  wire [4:0] dest_0;
  wire [4:0] c$dt1_app_arg;
  wire [24:0] a1_8;
  reg [30:0] result_28;
  wire [29:0] v;
  reg [3:0] c$case_scrut_4;
  wire [2:0] x_5;
  wire [11:0] dt_5;
  wire [4:0] dt2_5;
  wire [4:0] dt3_4;
  wire [25:0] result_29;
  wire [24:0] a1_9;
  wire [0:0] c$case_alt_44;
  wire [33:0] iBus;
  wire [31:0] c$$fResizeBitVector_$csignExtendOut;
  reg [11:0] c$$fResizeBitVector_$csignExtendOut_app_arg;
  wire signed [63:0] wild3_1;
  wire [991:0] result_30;
  wire [1023:0] c$app_arg_6;
  wire signed [63:0] c$wild3_app_arg_1;
  reg [4:0] c$transition_$jOut_app_arg;
  reg [4:0] c$transition_$jOut_case_alt;
  wire [4:0] c$transition_$jOut_case_alt_0;
  reg [31:0] result_31;
  reg [31:0] c$aluResult_case_alt;
  wire [31:0] c$aluResult_app_arg;
  reg [31:0] result_32;
  wire signed [63:0] result_33;
  wire signed [63:0] wild;
  wire signed [63:0] c$wild_app_arg;
  reg [31:0] result_34;
  wire [31:0] c$aluResult_case_alt_0;
  wire [31:0] c$aluResult_case_alt_1;
  wire [31:0] c$aluResult_case_alt_2;
  reg [31:0] c$aluResult_case_alt_3;
  reg [31:0] c$aluResult_case_alt_4;
  wire [31:0] c$aluResult_case_alt_5;
  wire [15:0] c$aluResult_app_arg_0;
  wire [31:0] c$aluResult_case_alt_6;
  wire [7:0] c$aluResult_app_arg_1;
  wire [33:0] dBusS2M;
  wire [31:0] c$aluResult_app_arg_2;
  reg [31:0] result_35;
  reg [31:0] c$aluResult_case_alt_7;
  reg [31:0] c$aluResult_case_alt_8;
  wire [31:0] result_36;
  wire [31:0] c$aluResult_case_alt_9;
  wire [31:0] \c$$j_0 ;
  reg [31:0] c$aluResult_case_alt_10;
  reg [31:0] c$aluResult_case_alt_11;
  wire [31:0] result_37;
  wire [31:0] c$aluResult_case_alt_12;
  wire [31:0] \c$$j_1 ;
  wire  c$aluResult_case_scrut;
  wire  c$aluResult_case_scrut_0;
  wire [63:0] x_6;
  wire [63:0] x_7;
  wire [63:0] c$x_app_arg;
  wire [63:0] x_8;
  wire [63:0] c$x_app_arg_0;
  wire signed [63:0] result_38;
  wire signed [63:0] wild_0;
  wire signed [63:0] c$wild_app_arg_0;
  wire [63:0] x_9;
  wire [31:0] c$aluResult_case_alt_13;
  wire [31:0] c$aluResult_case_alt_14;
  wire signed [31:0] c$aluResult_app_arg_3;
  wire signed [31:0] c$aluResult_app_arg_4;
  wire [31:0] result_39;
  wire signed [63:0] wild5_3;
  wire signed [63:0] c$wild5_app_arg_3;
  wire [4:0] c$dontApplyInHDLOut_app_arg;
  wire [31:0] c$$fResizeBitVector_$csignExtendOut_0;
  wire [11:0] c$$fResizeBitVector_$csignExtendOut_app_arg_0;
  wire [26:0] minstr;
  reg [4:0] c$dontApplyInHDLOut_app_arg_0;
  wire [25:0] jinstr;
  wire [31:0] c$$fResizeBitVector_$csignExtendOut_1;
  wire [63:0] c$$fResizeBitVector_$csignExtendOut_2;
  wire [31:0] result_40;
  wire [1023:0] registers0;
  wire signed [63:0] wild5_4;
  wire signed [63:0] c$wild5_app_arg_4;
  reg [4:0] c$dontApplyInHDLOut_app_arg_1;
  reg [4:0] c$dontApplyInHDLOut_case_alt;
  wire [26:0] iinstr;
  wire [1150:0] inp;
  wire [73:0] iBus_0;
  wire [75:0] dBus;
  wire [67:0] eta;
  wire [4:0] c$case_alt_11_selection;
  wire [4:0] c$case_alt_12_selection;
  wire [4:0] c$case_alt_13_selection;
  wire [4:0] c$case_alt_14_selection;
  wire [4:0] c$case_alt_15_selection;
  wire [4:0] c$case_alt_17_selection;
  wire [4:0] c$case_alt_18_selection;
  wire [4:0] c$case_alt_19_selection;
  wire [4:0] c$bv;
  wire [4:0] c$bv_0;
  wire [24:0] c$rs1AddrN_case_alt_1_selection;
  wire [31:0] c$bv_1;
  wire [1:0] c$dBusM2S_app_arg_selection;
  wire [4:0] c$bv_2;
  wire [3:0] c$dBusM2S_app_arg_0_selection;
  wire [1:0] c$dBusM2S_case_alt_selection;
  wire [4:0] c$bv_3;
  wire [19:0] c$bv_4;
  wire [2:0] result_7_selection;
  wire [4:0] c$bv_5;
  wire [4:0] c$bv_6;
  wire [6:0] result_10_selection_res;
  wire [31:0] c$bv_7;
  wire [31:0] c$bv_8;
  wire [31:0] c$bv_9;
  wire [31:0] c$bv_10;
  wire [31:0] c$bv_11;
  wire [31:0] c$bv_12;
  wire [31:0] c$bv_13;
  wire [31:0] c$bv_14;
  wire [31:0] c$bv_15;
  wire [31:0] c$bv_16;
  wire [31:0] c$bv_17;
  wire [31:0] c$bv_18;
  wire [31:0] c$bv_19;
  wire [31:0] c$bv_20;
  wire [31:0] c$bv_21;
  wire [31:0] c$bv_22;
  wire [31:0] c$bv_23;
  wire [31:0] c$bv_24;
  wire [31:0] c$bv_25;
  wire [31:0] c$bv_26;
  wire [31:0] c$bv_27;
  wire [31:0] c$bv_28;
  wire [2:0] c$case_alt_39_selection_res;
  wire [31:0] c$bv_29;
  wire [2:0] c$case_alt_41_selection_res;
  wire [31:0] c$bv_30;
  wire [31:0] c$bv_31;
  wire [31:0] c$bv_32;
  wire [31:0] c$bv_33;
  wire [1:0] c$case_scrut_1_selection_res;
  wire [31:0] c$bv_34;
  wire [31:0] c$bv_35;
  wire [31:0] c$bv_36;
  wire [31:0] c$bv_37;
  wire [31:0] c$bv_38;
  wire [2:0] c$case_scrut_2_selection_res;
  wire [31:0] c$bv_39;
  wire [31:0] c$bv_40;
  wire [31:0] c$bv_41;
  wire [31:0] c$bv_42;
  wire [31:0] c$bv_43;
  wire [31:0] c$bv_44;
  wire [31:0] c$bv_45;
  wire [31:0] c$bv_46;
  wire [31:0] c$bv_47;
  wire [31:0] c$bv_48;
  wire [31:0] c$bv_49;
  wire [31:0] c$bv_50;
  wire [31:0] c$bv_51;
  wire [31:0] c$bv_52;
  wire [31:0] c$bv_53;
  wire [1:0] c$case_scrut_3_selection_res;
  wire [31:0] c$bv_54;
  wire [31:0] c$bv_55;
  wire [31:0] c$bv_56;
  wire [2:0] result_28_selection_res;
  wire [31:0] c$bv_57;
  wire [2:0] c$case_scrut_4_selection_res;
  wire [31:0] c$bv_58;
  wire [31:0] c$bv_59;
  wire [31:0] c$bv_60;
  wire [31:0] c$bv_61;
  wire [31:0] c$bv_62;
  wire [31:0] c$bv_63;
  wire [31:0] c$bv_64;
  wire [4:0] c$bv_65;
  wire [1:0] result_32_selection;
  wire [63:0] c$bv_66;
  wire [2:0] result_34_selection;
  wire [3:0] c$aluResult_case_alt_3_selection;
  wire [1:0] c$aluResult_case_alt_4_selection;
  wire [31:0] c$bv_67;
  wire [31:0] c$bv_68;
  wire [4:0] result_35_selection;
  wire [4:0] c$bv_69;
  wire [11:0] c$bv_70;
  wire [4:0] c$bv_71;
  wire [149:0] _clash_internal;
  wire [73:0] iBusWishbone_0;
  wire [75:0] dbusWishbone;

  assign eta = {{iBusWishbone_DAT_MISO
                ,iBusWishbone_ACK
                ,iBusWishbone_ERR}
               ,{dBusWishbone_DAT_MISO
                ,dBusWishbone_ACK
                ,dBusWishbone_ERR}};

  // register begin
  always @(posedge clk ) begin : stage_register
    if ( reset) begin
      stage <= 1'd0;
    end else   begin
      stage <= inp[1150:1150];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : pc_register
    if ( reset) begin
      pc <= 32'd0;
    end else   begin
      pc <= inp[1149:1118];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : instruction_register
    if ( reset) begin
      instruction <= {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};
    end else   begin
      instruction <= inp[1117:1088];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : registers_register
    if ( reset) begin
      registers <= {{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}},{32 {1'bx}}};
    end else   begin
      registers <= inp[1087:96];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : rvfiInstr_register
    if ( reset) begin
      rvfiInstr <= 32'b00000000000000000000000000000000;
    end else   begin
      rvfiInstr <= inp[95:64];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : rvfiOrder_register
    if ( reset) begin
      rvfiOrder <= 64'b0000000000000000000000000000000000000000000000000000000000000000;
    end else   begin
      rvfiOrder <= inp[63:0];
    end
  end
  // register end

  assign result = c$case_alt[532:0];

  assign c$case_alt = stage ? {{c$app_arg_3
                               ,pcN1
                               ,instruction
                               ,result_2
                               ,rvfiInstr
                               ,c$app_arg_2}
                              ,{{30'b000000000000000000000000000000
                                ,32'b00000000000000000000000000000000
                                ,4'b1111
                                ,1'b0
                                ,1'b0
                                ,1'b0
                                ,3'b000
                                ,2'b00}
                               ,dBusM2S
                               ,{c$app_arg_1
                                ,rvfiOrder
                                ,rvfiInstr
                                ,branchTrap
                                ,1'b0
                                ,1'b0
                                ,2'b11
                                ,2'b01
                                ,rs1AddrN
                                ,rs2AddrN
                                ,result_1
                                ,result_0
                                ,c$app_arg_0
                                ,c$app_arg
                                ,pc
                                ,pcN1
                                ,dBusM2S[75:44]
                                ,c$case_alt_6
                                ,c$case_alt_4
                                ,c$case_alt_2
                                ,c$case_alt_0}}} : {{c$case_alt_44
                                                    ,pc
                                                    ,result_10
                                                    ,registers
                                                    ,iBus[33:2]
                                                    ,rvfiOrder}
                                                   ,{{c$aluResult_app_arg[31 : 2]
                                                     ,32'b00000000000000000000000000000000
                                                     ,4'b1111
                                                     ,1'b1
                                                     ,1'b1
                                                     ,1'b0
                                                     ,3'b000
                                                     ,2'b00}
                                                    ,{32'b00000000000000000000000000000000
                                                     ,32'b00000000000000000000000000000000
                                                     ,4'b1111
                                                     ,1'b0
                                                     ,1'b0
                                                     ,1'b0
                                                     ,3'b000
                                                     ,2'b00}
                                                    ,{1'b0
                                                     ,64'b0000000000000000000000000000000000000000000000000000000000000000
                                                     ,32'b00000000000000000000000000000000
                                                     ,1'b0
                                                     ,1'b0
                                                     ,1'b0
                                                     ,2'b11
                                                     ,2'b01
                                                     ,5'd0
                                                     ,5'd0
                                                     ,32'b00000000000000000000000000000000
                                                     ,32'b00000000000000000000000000000000
                                                     ,5'd0
                                                     ,32'b00000000000000000000000000000000
                                                     ,32'd0
                                                     ,32'd0
                                                     ,32'b00000000000000000000000000000000
                                                     ,4'b0000
                                                     ,4'b0000
                                                     ,32'b00000000000000000000000000000000
                                                     ,32'b00000000000000000000000000000000}}};

  assign c$case_alt_0 = dBusM2S[6:6] ? c$case_alt_1 : 32'b00000000000000000000000000000000;

  assign c$case_alt_1 = dBusM2S[5:5] ? dBusM2S[43:12] : 32'b00000000000000000000000000000000;

  assign c$case_alt_2 = dBusM2S[6:6] ? c$case_alt_3 : 32'b00000000000000000000000000000000;

  assign c$case_alt_3 = dBusM2S[5:5] ? 32'b00000000000000000000000000000000 : dBusS2M[33:2];

  assign c$case_alt_4 = dBusM2S[6:6] ? c$case_alt_5 : 4'b0000;

  assign c$case_alt_5 = dBusM2S[5:5] ? dBusM2S[11:8] : 4'b0000;

  assign c$case_alt_6 = dBusM2S[6:6] ? c$case_alt_7 : 4'b0000;

  assign c$case_alt_7 = dBusM2S[5:5] ? 4'b0000 : dBusM2S[11:8];

  always @(*) begin
    case(instruction[29:27])
      3'b100 : dBusM2S = result_3;
      default : dBusM2S = {32'b00000000000000000000000000000000
                          ,32'b00000000000000000000000000000000
                          ,4'b1111
                          ,1'b0
                          ,1'b0
                          ,1'b0
                          ,3'b000
                          ,2'b00};
    endcase
  end

  always @(*) begin
    case(instruction[29:27])
      3'b011 : c$app_arg = c$case_alt_10;
      3'b100 : c$app_arg = c$case_alt_9;
      3'b101 : c$app_arg = c$case_alt_15;
      3'b110 : c$app_arg = c$case_alt_8;
      default : c$app_arg = 32'b00000000000000000000000000000000;
    endcase
  end

  always @(*) begin
    case(iinstr[26:25])
      2'b00 : c$case_alt_8 = c$case_alt_14;
      2'b01 : c$case_alt_8 = c$case_alt_13;
      2'b10 : c$case_alt_8 = c$case_alt_12;
      default : c$case_alt_8 = c$case_alt_11;
    endcase
  end

  assign c$case_alt_9 = minstr[26:26] ? 32'b00000000000000000000000000000000 : c$case_alt_16;

  assign c$case_alt_10 = jinstr[25:25] ? c$case_alt_18 : c$case_alt_19;

  assign c$case_alt_11_selection = iinstr[4:0];

  always @(*) begin
    casez (c$case_alt_11_selection)
      5'b00000 : c$case_alt_11 = 32'b00000000000000000000000000000000;
      default : c$case_alt_11 = result_31;
    endcase
  end

  assign c$case_alt_12_selection = iinstr[4:0];

  always @(*) begin
    casez (c$case_alt_12_selection)
      5'b00000 : c$case_alt_12 = 32'b00000000000000000000000000000000;
      default : c$case_alt_12 = result_31;
    endcase
  end

  assign c$case_alt_13_selection = iinstr[12:8];

  always @(*) begin
    casez (c$case_alt_13_selection)
      5'b00000 : c$case_alt_13 = 32'b00000000000000000000000000000000;
      default : c$case_alt_13 = result_31;
    endcase
  end

  assign c$case_alt_14_selection = iinstr[4:0];

  always @(*) begin
    casez (c$case_alt_14_selection)
      5'b00000 : c$case_alt_14 = 32'b00000000000000000000000000000000;
      default : c$case_alt_14 = result_31;
    endcase
  end

  assign c$case_alt_15_selection = instruction[11:7];

  always @(*) begin
    casez (c$case_alt_15_selection)
      5'b00000 : c$case_alt_15 = 32'b00000000000000000000000000000000;
      default : c$case_alt_15 = result_31;
    endcase
  end

  assign c$case_alt_16 = dBusS2M[1:1] ? c$case_alt_17 : 32'b00000000000000000000000000000000;

  assign c$case_alt_17_selection = minstr[4:0];

  always @(*) begin
    casez (c$case_alt_17_selection)
      5'b00000 : c$case_alt_17 = 32'b00000000000000000000000000000000;
      default : c$case_alt_17 = result_31;
    endcase
  end

  assign c$case_alt_18_selection = jinstr[7:3];

  always @(*) begin
    casez (c$case_alt_18_selection)
      5'b00000 : c$case_alt_18 = 32'b00000000000000000000000000000000;
      default : c$case_alt_18 = result_31;
    endcase
  end

  assign c$case_alt_19_selection = jinstr[4:0];

  always @(*) begin
    casez (c$case_alt_19_selection)
      5'b00000 : c$case_alt_19 = 32'b00000000000000000000000000000000;
      default : c$case_alt_19 = result_31;
    endcase
  end

  always @(*) begin
    case(instruction[29:27])
      3'b011 : c$app_arg_0 = c$transition_$jOut_case_alt_0;
      3'b100 : c$app_arg_0 = c$case_alt_20;
      3'b101 : c$app_arg_0 = instruction[11:7];
      3'b110 : c$app_arg_0 = c$transition_$jOut_case_alt;
      default : c$app_arg_0 = 5'd0;
    endcase
  end

  assign c$case_alt_20 = minstr[26:26] ? 5'd0 : c$case_alt_21;

  assign c$case_alt_21 = dBusS2M[1:1] ? minstr[4:0] : 5'd0;

  // index begin
  wire [31:0] vecArray [0:32-1];
  genvar i;
  generate
  for (i=0; i < 32; i=i+1) begin : mk_array
    assign vecArray[(32-1)-i] = registers0[i*32+:32];
  end
  endgenerate
  assign result_0 = vecArray[(wild3)];
  // index end

  assign wild3 = $signed(c$wild3_app_arg);

  assign c$bv = (rs2AddrN);

  assign c$wild3_app_arg = $unsigned({{(64-5) {1'b0}},c$bv});

  always @(*) begin
    case(instruction[29:27])
      3'b000 : rs2AddrN = instruction[11:7];
      3'b100 : rs2AddrN = c$rs2AddrN_case_alt;
      3'b101 : rs2AddrN = instruction[21:17];
      default : rs2AddrN = 5'd0;
    endcase
  end

  // index begin
  wire [31:0] vecArray_0 [0:32-1];
  genvar i_0;
  generate
  for (i_0=0; i_0 < 32; i_0=i_0+1) begin : mk_array_0
    assign vecArray_0[(32-1)-i_0] = registers0[i_0*32+:32];
  end
  endgenerate
  assign result_1 = vecArray_0[(wild3_0)];
  // index end

  assign wild3_0 = $signed(c$wild3_app_arg_0);

  assign c$bv_0 = (rs1AddrN);

  assign c$wild3_app_arg_0 = $unsigned({{(64-5) {1'b0}},c$bv_0});

  always @(*) begin
    case(instruction[29:27])
      3'b000 : rs1AddrN = instruction[6:2];
      3'b001 : rs1AddrN = c$rs1AddrN_case_alt_1;
      3'b011 : rs1AddrN = c$rs1AddrN_case_alt_0;
      3'b100 : rs1AddrN = c$dontApplyInHDLOut_app_arg;
      3'b101 : rs1AddrN = instruction[16:12];
      3'b110 : rs1AddrN = c$rs1AddrN_case_alt;
      default : rs1AddrN = 5'd0;
    endcase
  end

  always @(*) begin
    case(instruction[29:27])
      3'b100 : c$app_arg_1 = dBusS2M[1:1];
      default : c$app_arg_1 = 1'b1;
    endcase
  end

  always @(*) begin
    case(iinstr[26:25])
      2'b00 : c$rs1AddrN_case_alt = iinstr[9:5];
      2'b01 : c$rs1AddrN_case_alt = iinstr[17:13];
      default : c$rs1AddrN_case_alt = 5'd0;
    endcase
  end

  assign c$rs1AddrN_case_alt_0 = jinstr[25:25] ? jinstr[12:8] : 5'd0;

  assign c$rs1AddrN_case_alt_1_selection = instruction[26:2];

  assign c$rs1AddrN_case_alt_1 = c$rs1AddrN_case_alt_1_selection[24:24] ? 5'd0 : instruction[11:7];

  assign c$rs2AddrN_case_alt = minstr[26:26] ? minstr[11:7] : 5'd0;

  assign pcN1 = branchTrap ? 32'd0 : result_6;

  assign c$bv_1 = (result_6);

  assign branchTrap = (c$bv_1[1 : 0]) != 2'b00;

  always @(*) begin
    case(instruction[29:27])
      3'b100 : c$app_arg_2 = c$case_alt_22;
      default : c$app_arg_2 = c$case_alt_23;
    endcase
  end

  assign c$case_alt_22 = dBusS2M[1:1] ? c$case_alt_23 : rvfiOrder;

  assign c$case_alt_23 = rvfiOrder + 64'b0000000000000000000000000000000000000000000000000000000000000001;

  always @(*) begin
    case(instruction[29:27])
      3'b011 : result_2 = result_30;
      3'b100 : result_2 = c$case_alt_24;
      3'b101 : result_2 = result_30;
      3'b110 : result_2 = result_30;
      default : result_2 = registers;
    endcase
  end

  assign c$case_alt_24 = minstr[26:26] ? registers : c$case_alt_25;

  assign c$case_alt_25 = dBusS2M[1:1] ? result_30 : registers;

  always @(*) begin
    case(instruction[29:27])
      3'b100 : c$app_arg_3 = c$case_alt_26;
      default : c$app_arg_3 = 1'd0;
    endcase
  end

  assign c$case_alt_26 = dBusS2M[1:1] ? 1'd0 : 1'd1;

  assign result_3 = minstr[26:26] ? {c$dBusM2S_app_arg_1
                                    ,result_4
                                    ,c$dBusM2S_app_arg
                                    ,1'b1
                                    ,1'b1
                                    ,1'b1
                                    ,3'b000
                                    ,2'b00} : {c$dBusM2S_app_arg_1
                                              ,32'b00000000000000000000000000000000
                                              ,c$dBusM2S_app_arg_0
                                              ,1'b1
                                              ,1'b1
                                              ,1'b0
                                              ,3'b000
                                              ,2'b00};

  assign c$dBusM2S_app_arg_selection = minstr[25:24];

  always @(*) begin
    case(c$dBusM2S_app_arg_selection)
      2'b00 : c$dBusM2S_app_arg = 4'b0001;
      2'b01 : c$dBusM2S_app_arg = 4'b0011;
      default : c$dBusM2S_app_arg = 4'b1111;
    endcase
  end

  // index begin
  wire [31:0] vecArray_1 [0:32-1];
  genvar i_1;
  generate
  for (i_1=0; i_1 < 32; i_1=i_1+1) begin : mk_array_1
    assign vecArray_1[(32-1)-i_1] = registers0[i_1*32+:32];
  end
  endgenerate
  assign result_4 = vecArray_1[(wild5)];
  // index end

  assign wild5 = $signed(c$wild5_app_arg);

  assign c$bv_2 = (minstr[11:7]);

  assign c$wild5_app_arg = $unsigned({{(64-5) {1'b0}},c$bv_2});

  assign c$dBusM2S_app_arg_0_selection = minstr[25:22];

  always @(*) begin
    case(c$dBusM2S_app_arg_0_selection[3:2])
      2'b00 : c$dBusM2S_app_arg_0 = c$dBusM2S_case_alt;
      2'b01 : c$dBusM2S_app_arg_0 = 4'b0011;
      default : c$dBusM2S_app_arg_0 = 4'b0001;
    endcase
  end

  assign c$dBusM2S_case_alt_selection = minstr[23:22];

  always @(*) begin
    case(c$dBusM2S_case_alt_selection)
      2'b00 : c$dBusM2S_case_alt = 4'b0001;
      2'b01 : c$dBusM2S_case_alt = 4'b0011;
      default : c$dBusM2S_case_alt = 4'b1111;
    endcase
  end

  assign c$dBusM2S_app_arg_1 = result_5 + c$$fResizeBitVector_$csignExtendOut_0;

  // index begin
  wire [31:0] vecArray_2 [0:32-1];
  genvar i_2;
  generate
  for (i_2=0; i_2 < 32; i_2=i_2+1) begin : mk_array_2
    assign vecArray_2[(32-1)-i_2] = registers0[i_2*32+:32];
  end
  endgenerate
  assign result_5 = vecArray_2[(wild5_0)];
  // index end

  assign wild5_0 = $signed(c$wild5_app_arg_0);

  assign c$bv_3 = (c$dontApplyInHDLOut_app_arg);

  assign c$wild5_app_arg_0 = $unsigned({{(64-5) {1'b0}},c$bv_3});

  always @(*) begin
    case(instruction[29:27])
      3'b000 : result_6 = result_7;
      3'b011 : result_6 = c$pcN0_case_alt;
      3'b100 : result_6 = c$pcN0_case_alt_0;
      default : result_6 = c$aluResult_app_arg_2;
    endcase
  end

  assign c$pcN0_case_alt = jinstr[25:25] ? (({(x[31 : 1]),1'b0})) : (pc + ((c$pcN0_app_arg << (64'sd1))));

  assign c$pcN0_case_alt_0 = dBusS2M[1:1] ? c$aluResult_app_arg_2 : pc;

  assign x = result_8 + c$$fResizeBitVector_$csignExtendOut;

  assign c$bv_4 = jinstr[24:5];

  assign c$pcN0_app_arg = (( c$bv_4[20-1] ) == (1'b0)) ? ({12'b000000000000,jinstr[24:5]}) : ({12'b111111111111,jinstr[24:5]});

  assign result_7_selection = instruction[14:12];

  always @(*) begin
    case(result_7_selection)
      3'b000 : result_7 = c$pcN0_case_alt_6;
      3'b001 : result_7 = c$pcN0_case_alt_5;
      3'b010 : result_7 = c$pcN0_case_alt_4;
      3'b011 : result_7 = c$pcN0_case_alt_3;
      3'b100 : result_7 = c$pcN0_case_alt_2;
      default : result_7 = c$pcN0_case_alt_1;
    endcase
  end

  assign c$pcN0_case_alt_1 = (result_8 >= result_9) ? \$j  : c$aluResult_app_arg_2;

  assign c$pcN0_case_alt_2 = (c$pcN0_app_arg_1 >= c$pcN0_app_arg_0) ? \$j  : c$aluResult_app_arg_2;

  assign c$pcN0_case_alt_3 = (result_8 < result_9) ? \$j  : c$aluResult_app_arg_2;

  assign c$pcN0_case_alt_4 = (c$pcN0_app_arg_1 < c$pcN0_app_arg_0) ? \$j  : c$aluResult_app_arg_2;

  assign c$pcN0_case_alt_5 = (result_8 != result_9) ? \$j  : c$aluResult_app_arg_2;

  assign c$pcN0_case_alt_6 = (result_8 == result_9) ? \$j  : c$aluResult_app_arg_2;

  assign \$j  = pc + ((c$$fResizeBitVector_$csignExtendOut << (64'sd1)));

  assign c$pcN0_app_arg_0 = $signed(result_9);

  assign c$pcN0_app_arg_1 = $signed(result_8);

  // index begin
  wire [31:0] vecArray_3 [0:32-1];
  genvar i_3;
  generate
  for (i_3=0; i_3 < 32; i_3=i_3+1) begin : mk_array_3
    assign vecArray_3[(32-1)-i_3] = registers0[i_3*32+:32];
  end
  endgenerate
  assign result_8 = vecArray_3[(wild5_1)];
  // index end

  assign wild5_1 = $signed(c$wild5_app_arg_1);

  assign c$bv_5 = (c$dontApplyInHDLOut_app_arg_0);

  assign c$wild5_app_arg_1 = $unsigned({{(64-5) {1'b0}},c$bv_5});

  // index begin
  wire [31:0] vecArray_4 [0:32-1];
  genvar i_4;
  generate
  for (i_4=0; i_4 < 32; i_4=i_4+1) begin : mk_array_4
    assign vecArray_4[(32-1)-i_4] = registers0[i_4*32+:32];
  end
  endgenerate
  assign result_9 = vecArray_4[(wild5_2)];
  // index end

  assign wild5_2 = $signed(c$wild5_app_arg_2);

  assign c$bv_6 = (instruction[11:7]);

  assign c$wild5_app_arg_2 = $unsigned({{(64-5) {1'b0}},c$bv_6});

  assign c$bv_7 = iBus[33:2];

  assign result_10_selection_res = c$bv_7[6 : 0];

  always @(*) begin
    case(result_10_selection_res)
      7'b1100011 : result_10 = c$case_alt_37;
      7'b1110011 : result_10 = c$case_alt_36;
      7'b1101111 : result_10 = c$case_alt_35;
      7'b1100111 : result_10 = c$case_alt_34;
      7'b0000011 : result_10 = c$case_alt_33;
      7'b0100011 : result_10 = c$case_alt_32;
      7'b0110011 : result_10 = c$case_alt_31;
      7'b0010011 : result_10 = c$case_alt_30;
      7'b0110111 : result_10 = c$case_alt_29;
      7'b0010111 : result_10 = c$case_alt_28;
      7'b0001111 : result_10 = c$case_alt_27;
      default : result_10 = {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};
    endcase
  end

  assign c$case_alt_27 = result_13[9:9] ? {3'b111,a1,18'bxxxxxxxxxxxxxxxxxx} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_28 = result_14[27:27] ? {3'b110,a1_0} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_29 = result_15[27:27] ? {3'b110,a1_1} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_30 = result_16[27:27] ? {3'b110,a1_2} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_31 = result_21[20:20] ? {3'b101,a1_3,7'bxxxxxxx} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_32 = result_22[27:27] ? {3'b100,a1_4} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_33 = result_23[27:27] ? {3'b100,a1_5} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_34 = result_24[26:26] ? {3'b011,a1_6,1'bx} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_35 = result_25[26:26] ? {3'b011,a1_7,1'bx} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_36 = result_28[30:30] ? v : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$case_alt_37 = result_29[25:25] ? {3'b000,a1_9,2'bxx} : {3'b110,{2'b00,3'd0,12'b000000000000,5'd0,5'd0}};

  assign c$bv_8 = iBus[33:2];

  assign dt = (c$bv_8[(64'sd27)]) == (1'b1);

  assign c$bv_9 = iBus[33:2];

  assign dt1 = (c$bv_9[(64'sd26)]) == (1'b1);

  assign c$bv_10 = iBus[33:2];

  assign dt2 = (c$bv_10[(64'sd25)]) == (1'b1);

  assign c$bv_11 = iBus[33:2];

  assign dt3 = (c$bv_11[(64'sd24)]) == (1'b1);

  assign result_11 = {dt,dt1,dt2,dt3};

  assign c$bv_12 = iBus[33:2];

  assign dt_0 = (c$bv_12[(64'sd23)]) == (1'b1);

  assign c$bv_13 = iBus[33:2];

  assign dt1_0 = (c$bv_13[(64'sd22)]) == (1'b1);

  assign c$bv_14 = iBus[33:2];

  assign dt2_0 = (c$bv_14[(64'sd21)]) == (1'b1);

  assign c$bv_15 = iBus[33:2];

  assign dt3_0 = (c$bv_15[(64'sd20)]) == (1'b1);

  assign result_12 = {dt_0,dt1_0,dt2_0,dt3_0};

  assign c$bv_16 = iBus[33:2];

  assign result_13 = ((c$bv_16[(64'sd12)]) == (1'b1)) ? {1'b1,{1'b1,8'bxxxxxxxx}} : {1'b1,{1'b0,result_11,result_12}};

  assign a1 = result_13[8:0];

  assign c$bv_17 = iBus[33:2];

  assign dt_1 = c$bv_17[31 : 12];

  assign c$bv_18 = iBus[33:2];

  assign dt1_1 = (c$bv_18[11 : 7]);

  assign result_14 = {1'b1,{2'b11,dt_1,dt1_1}};

  assign a1_0 = result_14[26:0];

  assign c$bv_19 = iBus[33:2];

  assign dt_2 = c$bv_19[31 : 12];

  assign c$bv_20 = iBus[33:2];

  assign dt1_2 = (c$bv_20[11 : 7]);

  assign result_15 = {1'b1,{2'b10,dt_2,dt1_2}};

  assign a1_1 = result_15[26:0];

  assign c$bv_21 = iBus[33:2];

  assign opcode = c$bv_21[14 : 12];

  assign c$bv_22 = iBus[33:2];

  assign src = (c$bv_22[19 : 15]);

  assign c$bv_23 = iBus[33:2];

  assign dest = (c$bv_23[11 : 7]);

  assign result_16 = c$case_scrut ? result_18 : c$case_alt_38;

  always @(*) begin
    case(opcode)
      3'b001 : c$case_scrut = 1'b1;
      default : c$case_scrut = opcode == 3'b101;
    endcase
  end

  assign c$case_alt_38 = c$case_scrut_0[3:3] ? {1'b1,{2'b00,x_0,dt1_4,src,dest}} : {1'b0,27'bxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$bv_24 = iBus[33:2];

  assign dt1_3 = c$bv_24[24 : 20];

  assign result_17 = {1'b1,{2'b01,c$decodeRIInstr_$jOut_app_arg,dt1_3,src,dest,8'bxxxxxxxx}};

  always @(*) begin
    case(opcode)
      3'b001 : result_18 = result_17;
      3'b101 : result_18 = result_17;
      default : result_18 = {1'b0,27'bxxxxxxxxxxxxxxxxxxxxxxxxxxx};
    endcase
  end

  always @(*) begin
    case(opcode)
      3'b001 : c$decodeRIInstr_$jOut_app_arg = 2'd0;
      default : c$decodeRIInstr_$jOut_app_arg = c$decodeRIInstr_$jOut_case_alt;
    endcase
  end

  assign c$bv_25 = iBus[33:2];

  assign c$decodeRIInstr_$jOut_case_alt = ((c$bv_25[(64'sd30)]) == (1'b1)) ? 2'd2 : 2'd1;

  always @(*) begin
    case(opcode)
      3'b000 : c$case_scrut_0 = {1'b1,3'd0};
      3'b010 : c$case_scrut_0 = {1'b1,3'd1};
      3'b011 : c$case_scrut_0 = {1'b1,3'd2};
      3'b100 : c$case_scrut_0 = {1'b1,3'd3};
      3'b110 : c$case_scrut_0 = {1'b1,3'd4};
      3'b111 : c$case_scrut_0 = {1'b1,3'd5};
      default : c$case_scrut_0 = {1'b0,3'bxxx};
    endcase
  end

  assign x_0 = c$case_scrut_0[2:0];

  assign c$bv_26 = iBus[33:2];

  assign dt1_4 = c$bv_26[31 : 20];

  assign a1_2 = result_16[26:0];

  assign c$bv_27 = iBus[33:2];

  assign ds = (c$bv_27[(64'sd30)]) == (1'b1);

  assign c$bv_28 = iBus[33:2];

  assign ds1 = (c$bv_28[(64'sd25)]) == (1'b1);

  assign c$bv_29 = iBus[33:2];

  assign c$case_alt_39_selection_res = c$bv_29[14 : 12];

  always @(*) begin
    case(c$case_alt_39_selection_res)
      3'b000 : c$case_alt_39 = {1'b1,c$app_arg_5};
      3'b001 : c$case_alt_39 = {1'b1,5'd6};
      3'b010 : c$case_alt_39 = {1'b1,5'd1};
      3'b011 : c$case_alt_39 = {1'b1,5'd2};
      3'b100 : c$case_alt_39 = {1'b1,5'd5};
      3'b101 : c$case_alt_39 = {1'b1,c$app_arg_4};
      3'b110 : c$case_alt_39 = {1'b1,5'd4};
      default : c$case_alt_39 = {1'b1,5'd3};
    endcase
  end

  assign c$app_arg_4 = ds ? 5'd9 : 5'd7;

  assign c$app_arg_5 = ds ? 5'd8 : 5'd0;

  assign result_19 = ds1 ? {1'b0,5'bxxxxx} : c$case_alt_39;

  assign result_20 = ds ? result_19 : c$case_alt_40;

  assign c$case_alt_40 = ds1 ? c$case_alt_41 : result_19;

  assign c$bv_30 = iBus[33:2];

  assign c$case_alt_41_selection_res = c$bv_30[14 : 12];

  always @(*) begin
    case(c$case_alt_41_selection_res)
      3'b000 : c$case_alt_41 = {1'b1,5'd10};
      3'b001 : c$case_alt_41 = {1'b1,5'd11};
      3'b010 : c$case_alt_41 = {1'b1,5'd12};
      3'b011 : c$case_alt_41 = {1'b1,5'd13};
      3'b100 : c$case_alt_41 = {1'b1,5'd14};
      3'b101 : c$case_alt_41 = {1'b1,5'd15};
      3'b110 : c$case_alt_41 = {1'b1,5'd16};
      default : c$case_alt_41 = {1'b1,5'd17};
    endcase
  end

  assign x_1 = result_20[4:0];

  assign c$bv_31 = iBus[33:2];

  assign dt1_5 = (c$bv_31[24 : 20]);

  assign c$bv_32 = iBus[33:2];

  assign dt2_1 = (c$bv_32[19 : 15]);

  assign c$bv_33 = iBus[33:2];

  assign dt3_1 = (c$bv_33[11 : 7]);

  assign result_21 = result_20[5:5] ? {1'b1,{x_1
                                            ,dt1_5
                                            ,dt2_1
                                            ,dt3_1}} : {1'b0,20'bxxxxxxxxxxxxxxxxxxxx};

  assign a1_3 = result_21[19:0];

  assign c$bv_34 = iBus[33:2];

  assign c$case_scrut_1_selection_res = c$bv_34[13 : 12];

  always @(*) begin
    case(c$case_scrut_1_selection_res)
      2'b00 : c$case_scrut_1 = {1'b1,2'd0};
      2'b01 : c$case_scrut_1 = {1'b1,2'd1};
      2'b10 : c$case_scrut_1 = {1'b1,2'd2};
      default : c$case_scrut_1 = {1'b0,2'bxx};
    endcase
  end

  assign x_2 = c$case_scrut_1[1:0];

  assign c$bv_35 = iBus[33:2];

  assign c$bv_36 = iBus[33:2];

  assign dt1_6 = {(c$bv_35[31 : 25]),(c$bv_36[11 : 7])};

  assign c$bv_37 = iBus[33:2];

  assign dt2_2 = (c$bv_37[24 : 20]);

  assign c$bv_38 = iBus[33:2];

  assign dt3_2 = (c$bv_38[19 : 15]);

  assign result_22 = c$case_scrut_1[2:2] ? {1'b1,{1'b1,x_2,dt1_6,dt2_2,dt3_2,2'bxx}} : {1'b0,27'bxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign a1_4 = result_22[26:0];

  assign c$bv_39 = iBus[33:2];

  assign c$case_scrut_2_selection_res = c$bv_39[14 : 12];

  always @(*) begin
    case(c$case_scrut_2_selection_res)
      3'b000 : c$case_scrut_2 = {1'b1,{2'b00,2'd0}};
      3'b001 : c$case_scrut_2 = {1'b1,{2'b00,2'd1}};
      3'b010 : c$case_scrut_2 = {1'b1,{2'b00,2'd2}};
      3'b100 : c$case_scrut_2 = {1'b1,{2'b10,2'bxx}};
      3'b101 : c$case_scrut_2 = {1'b1,{2'b01,2'bxx}};
      default : c$case_scrut_2 = {1'b0,4'bxxxx};
    endcase
  end

  assign x_3 = c$case_scrut_2[3:0];

  assign c$bv_40 = iBus[33:2];

  assign dt1_7 = c$bv_40[31 : 20];

  assign c$bv_41 = iBus[33:2];

  assign dt2_3 = (c$bv_41[19 : 15]);

  assign c$bv_42 = iBus[33:2];

  assign dt3_3 = (c$bv_42[11 : 7]);

  assign result_23 = c$case_scrut_2[4:4] ? {1'b1,{1'b0,x_3,dt1_7,dt2_3,dt3_3}} : {1'b0,27'bxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign a1_5 = result_23[26:0];

  assign c$bv_43 = iBus[33:2];

  assign dt_3 = c$bv_43[31 : 20];

  assign c$bv_44 = iBus[33:2];

  assign dt1_8 = (c$bv_44[19 : 15]);

  assign c$bv_45 = iBus[33:2];

  assign dt2_4 = (c$bv_45[11 : 7]);

  assign result_24 = {1'b1,{1'b1,dt_3,dt1_8,dt2_4,3'bxxx}};

  assign a1_6 = result_24[25:0];

  assign c$bv_46 = iBus[33:2];

  assign c$bv_47 = iBus[33:2];

  assign c$bv_48 = iBus[33:2];

  assign c$bv_49 = iBus[33:2];

  assign dt_4 = {({({(c$bv_46[31 : 31]),(c$bv_47[19 : 12])}),(c$bv_48[20 : 20])}),(c$bv_49[30 : 21])};

  assign c$bv_50 = iBus[33:2];

  assign dt1_9 = (c$bv_50[11 : 7]);

  assign result_25 = {1'b1,{1'b0,dt_4,dt1_9}};

  assign a1_7 = result_25[25:0];

  assign c$bv_51 = iBus[33:2];

  assign c$case_alt_42 = ((c$bv_51[(64'sd20)]) == (1'b1)) ? {1'b1,{3'b010,1'd1,26'bxxxxxxxxxxxxxxxxxxxxxxxxxx}} : {1'b1,{3'b010,1'd0,26'bxxxxxxxxxxxxxxxxxxxxxxxxxx}};

  assign c$case_alt_43 = result_26[25:25] ? {1'b1,{3'b001,a1_8,2'bxx}} : {1'b0,30'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign result_26 = c$case_scrut_3[2:2] ? result_27 : {1'b0,25'bxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$bv_52 = iBus[33:2];

  assign result_27 = ((c$bv_52[(64'sd14)]) == (1'b1)) ? {1'b1,{1'b1,x_4,v1,c$dt1_app_arg,dest_0}} : {1'b1,{1'b0,x_4,v1,dt1_10,dest_0}};

  assign dt1_10 = c$dt1_app_arg;

  assign c$bv_53 = iBus[33:2];

  assign v1 = c$bv_53[31 : 20];

  assign x_4 = c$case_scrut_3[1:0];

  assign c$bv_54 = iBus[33:2];

  assign c$case_scrut_3_selection_res = c$bv_54[13 : 12];

  always @(*) begin
    case(c$case_scrut_3_selection_res)
      2'b01 : c$case_scrut_3 = {1'b1,2'd0};
      2'b10 : c$case_scrut_3 = {1'b1,2'd1};
      2'b11 : c$case_scrut_3 = {1'b1,2'd2};
      default : c$case_scrut_3 = {1'b0,2'bxx};
    endcase
  end

  assign c$bv_55 = iBus[33:2];

  assign dest_0 = (c$bv_55[11 : 7]);

  assign c$bv_56 = iBus[33:2];

  assign c$dt1_app_arg = c$bv_56[19 : 15];

  assign a1_8 = result_26[24:0];

  assign c$bv_57 = iBus[33:2];

  assign result_28_selection_res = c$bv_57[14 : 12];

  always @(*) begin
    case(result_28_selection_res)
      3'b000 : result_28 = c$case_alt_42;
      default : result_28 = c$case_alt_43;
    endcase
  end

  assign v = result_28[29:0];

  assign c$bv_58 = iBus[33:2];

  assign c$case_scrut_4_selection_res = c$bv_58[14 : 12];

  always @(*) begin
    case(c$case_scrut_4_selection_res)
      3'b000 : c$case_scrut_4 = {1'b1,3'd0};
      3'b001 : c$case_scrut_4 = {1'b1,3'd1};
      3'b100 : c$case_scrut_4 = {1'b1,3'd2};
      3'b101 : c$case_scrut_4 = {1'b1,3'd4};
      3'b110 : c$case_scrut_4 = {1'b1,3'd3};
      3'b111 : c$case_scrut_4 = {1'b1,3'd5};
      default : c$case_scrut_4 = {1'b0,3'bxxx};
    endcase
  end

  assign x_5 = c$case_scrut_4[2:0];

  assign c$bv_59 = iBus[33:2];

  assign c$bv_60 = iBus[33:2];

  assign c$bv_61 = iBus[33:2];

  assign c$bv_62 = iBus[33:2];

  assign dt_5 = {({({(c$bv_59[31 : 31]),(c$bv_60[7 : 7])}),(c$bv_61[30 : 25])}),(c$bv_62[11 : 8])};

  assign c$bv_63 = iBus[33:2];

  assign dt2_5 = (c$bv_63[24 : 20]);

  assign c$bv_64 = iBus[33:2];

  assign dt3_4 = (c$bv_64[19 : 15]);

  assign result_29 = c$case_scrut_4[3:3] ? {1'b1,{dt_5
                                                 ,x_5
                                                 ,dt2_5
                                                 ,dt3_4}} : {1'b0,25'bxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign a1_9 = result_29[24:0];

  assign c$case_alt_44 = iBus[1:1] ? 1'd1 : 1'd0;

  assign iBus = eta[67:34];

  assign c$$fResizeBitVector_$csignExtendOut = (( c$$fResizeBitVector_$csignExtendOut_app_arg[12-1] ) == (1'b0)) ? ({20'b00000000000000000000,c$$fResizeBitVector_$csignExtendOut_app_arg}) : ({20'b11111111111111111111,c$$fResizeBitVector_$csignExtendOut_app_arg});

  always @(*) begin
    case(instruction[29:27])
      3'b000 : c$$fResizeBitVector_$csignExtendOut_app_arg = instruction[26:15];
      default : c$$fResizeBitVector_$csignExtendOut_app_arg = jinstr[24:13];
    endcase
  end

  assign wild3_1 = $signed(c$wild3_app_arg_1);

  assign result_30 = c$app_arg_6[992-1 : 0];

  // vector replace begin
  genvar i_5;
  generate
  for (i_5=0;i_5<32;i_5=i_5+1) begin : vector_replace
    assign c$app_arg_6[(31-i_5)*32+:32] = (wild3_1) == i_5 ? result_31 : registers0[(31-i_5)*32+:32];
  end
  endgenerate
  // vector replace end

  assign c$bv_65 = (c$transition_$jOut_app_arg);

  assign c$wild3_app_arg_1 = $unsigned({{(64-5) {1'b0}},c$bv_65});

  always @(*) begin
    case(instruction[29:27])
      3'b011 : c$transition_$jOut_app_arg = c$transition_$jOut_case_alt_0;
      3'b100 : c$transition_$jOut_app_arg = minstr[4:0];
      3'b101 : c$transition_$jOut_app_arg = instruction[11:7];
      default : c$transition_$jOut_app_arg = c$transition_$jOut_case_alt;
    endcase
  end

  always @(*) begin
    case(iinstr[26:25])
      2'b00 : c$transition_$jOut_case_alt = iinstr[4:0];
      2'b01 : c$transition_$jOut_case_alt = iinstr[12:8];
      2'b10 : c$transition_$jOut_case_alt = iinstr[4:0];
      default : c$transition_$jOut_case_alt = iinstr[4:0];
    endcase
  end

  assign c$transition_$jOut_case_alt_0 = jinstr[25:25] ? jinstr[7:3] : jinstr[4:0];

  always @(*) begin
    case(instruction[29:27])
      3'b011 : result_31 = c$aluResult_app_arg_2;
      3'b100 : result_31 = c$aluResult_case_alt_2;
      3'b101 : result_31 = result_35;
      3'b110 : result_31 = c$aluResult_case_alt;
      default : result_31 = 32'b00000000000000000000000000000000;
    endcase
  end

  always @(*) begin
    case(iinstr[26:25])
      2'b00 : c$aluResult_case_alt = result_34;
      2'b01 : c$aluResult_case_alt = result_32;
      2'b10 : c$aluResult_case_alt = {iinstr[24:5],12'b000000000000};
      default : c$aluResult_case_alt = c$aluResult_app_arg + ({iinstr[24:5],12'b000000000000});
    endcase
  end

  assign c$aluResult_app_arg = pc;

  assign result_32_selection = iinstr[24:23];

  always @(*) begin
    case(result_32_selection)
      2'b00 : result_32 = result_40 << result_33;
      2'b01 : result_32 = result_40 >> result_33;
      default : result_32 = $unsigned((c$aluResult_app_arg_4 >>> result_33));
    endcase
  end

  assign result_33 = wild;

  assign wild = $signed(c$wild_app_arg);

  assign c$bv_66 = ({59'b00000000000000000000000000000000000000000000000000000000000,iinstr[22:18]});

  assign c$wild_app_arg = $unsigned(c$bv_66[0+:64]);

  assign result_34_selection = iinstr[24:22];

  always @(*) begin
    case(result_34_selection)
      3'b000 : result_34 = result_40 + c$$fResizeBitVector_$csignExtendOut_1;
      3'b001 : result_34 = c$aluResult_case_alt_1;
      3'b010 : result_34 = c$aluResult_case_alt_0;
      3'b011 : result_34 = result_40 ^ c$$fResizeBitVector_$csignExtendOut_1;
      3'b100 : result_34 = result_40 | c$$fResizeBitVector_$csignExtendOut_1;
      default : result_34 = result_40 & c$$fResizeBitVector_$csignExtendOut_1;
    endcase
  end

  assign c$aluResult_case_alt_0 = (result_40 < c$$fResizeBitVector_$csignExtendOut_1) ? 32'b00000000000000000000000000000001 : 32'b00000000000000000000000000000000;

  assign c$aluResult_case_alt_1 = (c$aluResult_app_arg_4 < ($signed(c$$fResizeBitVector_$csignExtendOut_1))) ? 32'b00000000000000000000000000000001 : 32'b00000000000000000000000000000000;

  assign c$aluResult_case_alt_2 = minstr[26:26] ? 32'b00000000000000000000000000000000 : c$aluResult_case_alt_3;

  assign c$aluResult_case_alt_3_selection = minstr[25:22];

  always @(*) begin
    case(c$aluResult_case_alt_3_selection[3:2])
      2'b00 : c$aluResult_case_alt_3 = c$aluResult_case_alt_4;
      2'b01 : c$aluResult_case_alt_3 = {16'b0000000000000000,c$aluResult_app_arg_0};
      default : c$aluResult_case_alt_3 = {24'b000000000000000000000000,c$aluResult_app_arg_1};
    endcase
  end

  assign c$aluResult_case_alt_4_selection = minstr[23:22];

  always @(*) begin
    case(c$aluResult_case_alt_4_selection)
      2'b00 : c$aluResult_case_alt_4 = c$aluResult_case_alt_6;
      2'b01 : c$aluResult_case_alt_4 = c$aluResult_case_alt_5;
      default : c$aluResult_case_alt_4 = dBusS2M[33:2];
    endcase
  end

  assign c$aluResult_case_alt_5 = (( c$aluResult_app_arg_0[16-1] ) == (1'b0)) ? ({16'b0000000000000000,c$aluResult_app_arg_0}) : ({16'b1111111111111111,c$aluResult_app_arg_0});

  assign c$bv_67 = dBusS2M[33:2];

  assign c$aluResult_app_arg_0 = c$bv_67[15 : 0];

  assign c$aluResult_case_alt_6 = (( c$aluResult_app_arg_1[8-1] ) == (1'b0)) ? ({24'b000000000000000000000000,c$aluResult_app_arg_1}) : ({24'b111111111111111111111111,c$aluResult_app_arg_1});

  assign c$bv_68 = dBusS2M[33:2];

  assign c$aluResult_app_arg_1 = c$bv_68[7 : 0];

  assign dBusS2M = eta[33:0];

  assign c$aluResult_app_arg_2 = pc + 32'd4;

  assign result_35_selection = instruction[26:22];

  always @(*) begin
    case(result_35_selection)
      5'b00000 : result_35 = result_40 + result_39;
      5'b00001 : result_35 = c$aluResult_case_alt_14;
      5'b00010 : result_35 = c$aluResult_case_alt_13;
      5'b00011 : result_35 = result_40 & result_39;
      5'b00100 : result_35 = result_40 | result_39;
      5'b00101 : result_35 = result_40 ^ result_39;
      5'b00110 : result_35 = result_40 << result_38;
      5'b00111 : result_35 = result_40 >> result_38;
      5'b01000 : result_35 = result_40 - result_39;
      5'b01001 : result_35 = $unsigned((c$aluResult_app_arg_4 >>> result_38));
      5'b01010 : result_35 = result_40 * result_39;
      5'b01011 : result_35 = x_8[63 : 32];
      5'b01100 : result_35 = x_7[63 : 32];
      5'b01101 : result_35 = x_6[63 : 32];
      5'b01110 : result_35 = c$aluResult_case_alt_11;
      5'b01111 : result_35 = c$aluResult_case_alt_10;
      5'b10000 : result_35 = c$aluResult_case_alt_8;
      default : result_35 = c$aluResult_case_alt_7;
    endcase
  end

  always @(*) begin
    case(result_39)
      32'b00000000000000000000000000000000 : c$aluResult_case_alt_7 = result_40;
      default : c$aluResult_case_alt_7 = result_40 % result_39;
    endcase
  end

  always @(*) begin
    case(result_39)
      32'b00000000000000000000000000000000 : c$aluResult_case_alt_8 = result_40;
      default : c$aluResult_case_alt_8 = result_36;
    endcase
  end

  assign result_36 = c$aluResult_case_scrut_0 ? c$aluResult_case_alt_9 : \c$$j_0 ;

  assign c$aluResult_case_alt_9 = c$aluResult_case_scrut ? 32'b00000000000000000000000000000000 : \c$$j_0 ;

  assign \c$$j_0  = $unsigned((c$aluResult_app_arg_4 % c$aluResult_app_arg_3));

  always @(*) begin
    case(result_39)
      32'b00000000000000000000000000000000 : c$aluResult_case_alt_10 = 32'b11111111111111111111111111111111;
      default : c$aluResult_case_alt_10 = result_40 / result_39;
    endcase
  end

  always @(*) begin
    case(result_39)
      32'b00000000000000000000000000000000 : c$aluResult_case_alt_11 = 32'b11111111111111111111111111111111;
      default : c$aluResult_case_alt_11 = result_37;
    endcase
  end

  assign result_37 = c$aluResult_case_scrut_0 ? c$aluResult_case_alt_12 : \c$$j_1 ;

  assign c$aluResult_case_alt_12 = c$aluResult_case_scrut ? 32'b10000000000000000000000000000000 : \c$$j_1 ;

  assign \c$$j_1  = $unsigned((c$aluResult_app_arg_4 / c$aluResult_app_arg_3));

  assign c$aluResult_case_scrut = result_39 == 32'b11111111111111111111111111111111;

  assign c$aluResult_case_scrut_0 = result_40 == 32'b10000000000000000000000000000000;

  assign x_6 = ({32'b00000000000000000000000000000000,result_40}) * c$x_app_arg;

  assign x_7 = c$$fResizeBitVector_$csignExtendOut_2 * c$x_app_arg;

  assign c$x_app_arg = {32'b00000000000000000000000000000000,result_39};

  assign x_8 = c$$fResizeBitVector_$csignExtendOut_2 * c$x_app_arg_0;

  assign c$x_app_arg_0 = (( result_39[32-1] ) == (1'b0)) ? ({32'b00000000000000000000000000000000,result_39}) : ({32'b11111111111111111111111111111111,result_39});

  assign result_38 = wild_0;

  assign wild_0 = $signed(c$wild_app_arg_0);

  assign c$wild_app_arg_0 = $unsigned(x_9[0+:64]);

  assign x_9 = {59'b00000000000000000000000000000000000000000000000000000000000,(result_39[4 : 0])};

  assign c$aluResult_case_alt_13 = (result_40 < result_39) ? 32'b00000000000000000000000000000001 : 32'b00000000000000000000000000000000;

  assign c$aluResult_case_alt_14 = (c$aluResult_app_arg_4 < c$aluResult_app_arg_3) ? 32'b00000000000000000000000000000001 : 32'b00000000000000000000000000000000;

  assign c$aluResult_app_arg_3 = $signed(result_39);

  assign c$aluResult_app_arg_4 = $signed(result_40);

  // index begin
  wire [31:0] vecArray_5 [0:32-1];
  genvar i_6;
  generate
  for (i_6=0; i_6 < 32; i_6=i_6+1) begin : mk_array_5
    assign vecArray_5[(32-1)-i_6] = registers0[i_6*32+:32];
  end
  endgenerate
  assign result_39 = vecArray_5[(wild5_3)];
  // index end

  assign wild5_3 = $signed(c$wild5_app_arg_3);

  assign c$bv_69 = (instruction[21:17]);

  assign c$wild5_app_arg_3 = $unsigned({{(64-5) {1'b0}},c$bv_69});

  assign c$dontApplyInHDLOut_app_arg = minstr[26:26] ? minstr[6:2] : minstr[9:5];

  assign c$$fResizeBitVector_$csignExtendOut_0 = (( c$$fResizeBitVector_$csignExtendOut_app_arg_0[12-1] ) == (1'b0)) ? ({20'b00000000000000000000,c$$fResizeBitVector_$csignExtendOut_app_arg_0}) : ({20'b11111111111111111111,c$$fResizeBitVector_$csignExtendOut_app_arg_0});

  assign c$$fResizeBitVector_$csignExtendOut_app_arg_0 = minstr[26:26] ? minstr[23:12] : minstr[21:10];

  assign minstr = instruction[26:0];

  always @(*) begin
    case(instruction[29:27])
      3'b000 : c$dontApplyInHDLOut_app_arg_0 = instruction[6:2];
      default : c$dontApplyInHDLOut_app_arg_0 = jinstr[12:8];
    endcase
  end

  assign jinstr = instruction[26:1];

  assign c$bv_70 = iinstr[21:10];

  assign c$$fResizeBitVector_$csignExtendOut_1 = (( c$bv_70[12-1] ) == (1'b0)) ? ({20'b00000000000000000000,iinstr[21:10]}) : ({20'b11111111111111111111,iinstr[21:10]});

  assign c$$fResizeBitVector_$csignExtendOut_2 = (( result_40[32-1] ) == (1'b0)) ? ({32'b00000000000000000000000000000000,result_40}) : ({32'b11111111111111111111111111111111,result_40});

  // index begin
  wire [31:0] vecArray_6 [0:32-1];
  genvar i_7;
  generate
  for (i_7=0; i_7 < 32; i_7=i_7+1) begin : mk_array_6
    assign vecArray_6[(32-1)-i_7] = registers0[i_7*32+:32];
  end
  endgenerate
  assign result_40 = vecArray_6[(wild5_4)];
  // index end

  assign registers0 = {32'b00000000000000000000000000000000
                      ,registers};

  assign wild5_4 = $signed(c$wild5_app_arg_4);

  assign c$bv_71 = (c$dontApplyInHDLOut_app_arg_1);

  assign c$wild5_app_arg_4 = $unsigned({{(64-5) {1'b0}},c$bv_71});

  always @(*) begin
    case(instruction[29:27])
      3'b101 : c$dontApplyInHDLOut_app_arg_1 = instruction[16:12];
      default : c$dontApplyInHDLOut_app_arg_1 = c$dontApplyInHDLOut_case_alt;
    endcase
  end

  always @(*) begin
    case(iinstr[26:25])
      2'b00 : c$dontApplyInHDLOut_case_alt = iinstr[9:5];
      default : c$dontApplyInHDLOut_case_alt = iinstr[17:13];
    endcase
  end

  assign iinstr = instruction[26:0];

  assign inp = c$case_alt[1683:533];

  assign _clash_internal = {iBus_0,dBus};

  assign iBus_0 = result[532:459];

  assign dBus = result[458:383];

  assign iBusWishbone_0 = _clash_internal[149:76];

  assign dbusWishbone = _clash_internal[75:0];

  assign iBusWishbone_ADR = iBusWishbone_0[73:44];

  assign iBusWishbone_DAT_MOSI = iBusWishbone_0[43:12];

  assign iBusWishbone_SEL = iBusWishbone_0[11:8];

  assign iBusWishbone_CYC = iBusWishbone_0[7:7];

  assign iBusWishbone_STB = iBusWishbone_0[6:6];

  assign iBusWishbone_WE = iBusWishbone_0[5:5];

  assign iBusWishbone_CTI = iBusWishbone_0[4:2];

  assign iBusWishbone_BTE = iBusWishbone_0[1:0];

  assign dbusWishbone_ADR = dbusWishbone[75:44];

  assign dbusWishbone_DAT_MOSI = dbusWishbone[43:12];

  assign dbusWishbone_SEL = dbusWishbone[11:8];

  assign dbusWishbone_CYC = dbusWishbone[7:7];

  assign dbusWishbone_STB = dbusWishbone[6:6];

  assign dbusWishbone_WE = dbusWishbone[5:5];

  assign dbusWishbone_CTI = dbusWishbone[4:2];

  assign dbusWishbone_BTE = dbusWishbone[1:0];


endmodule

